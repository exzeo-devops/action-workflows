name: Test and Deploy Serverless

on: 
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment to push to"
        required: true
    secrets:
      AWS_OIDC_AUDIENCE:
        required: true


concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:  

  deploy:
    name: "Deploying to ${{ inputs.environment }}"
    runs-on: self-hosted
    environment: "${{ inputs.environment }}"
    # if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: .go-version

      - name: Validate environment
        run: |
          if [ -z "${{ vars.ROLE_ARN }}" ]; then
            echo "Variable 'ROLE_ARN' needs to be provided in the environment: ${{ inputs.environment }}";
            exit 1;                    
          fi

      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1      
        with:
          audience: ${{ secrets.AWS_OIDC_AUDIENCE }}
          role-to-assume: ${{ vars.ROLE_ARN }}
          aws-region: "us-east-1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #     echo "Pushing image to ECR..."
      #     docker --debug push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"      